---
import Base from "@layouts/Base.astro";
import { workQuery, siteConfigQuery } from "@api/queries";
import { imageBuilder, loadQuery } from "@api/sanity";
import SanityComponentsRenderer from "@components/cms-components/SanityComponentsRenderer.astro";
import HeroHeader from "@components/uicomposition/HeroHeader.astro";
import Customers from "@components/uicomposition/Customers.astro";
import { isPreview, siteLanguage } from "src/stores/global-store";
import type { SiteConfigQueryResult } from "@sanity/sanity.types";
import type {WorkWithReferences} from "@sanity/custom.sanity.types";
import ProjectMetadata from "@components/uicomposition/ProjectMetadata.astro";
import TechnologyIcon from "@components/uielements/TechnologyIcon.astro";
import SanityImg from "@otterstack/sanity-img-astro";
import {getHrefFromLinkObject} from "@lib/sanityHelpers";
import CasePreview from '@components/uielements/CasePreview.astro';
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";

export const prerender = false;
const { lang, slug } = Astro.params;
if (!lang || !slug) {
  return Astro.redirect("/404");
}

const { data: siteConfig } = await loadQuery<SiteConfigQueryResult>({
  query: siteConfigQuery,
  params: { language: lang.toLowerCase() },
});

if (!siteConfig) {
  return new Response(null, { status: 404 });
}

const { data: workPage } = await loadQuery<WorkWithReferences>({
  query: workQuery,
  params: { language: lang, slug: slug },
});

siteLanguage.set(lang.toLowerCase());
isPreview.set(true);
---

<Base
  title={`${workPage?.metadata?.title || workPage?.intro?.title!} - ${siteConfig.siteName}`}
  description={workPage?.metadata?.description || ""}
  slug={slug}
  siteConfig={siteConfig}
>
  <HeroHeader
    headline={workPage?.intro?.title}
    text={workPage?.intro?.intro}
    backgroundImage={workPage?.image?.asset?._id}
  >
    {
      workPage.customerReferences &&
        workPage.customerReferences.length > 0 && (
          <Customers headline={workPage.customerReferencesText}>
            {workPage.customerReferences?.map((customer) => (
              <>
                {customer?.logo?.default?.asset && (
                  <img
                    src={imageBuilder
                      .image(customer?.logo?.default?.asset)
                      .height(80)
                      .url()}
                    alt={
                      customer.logo.default.asset.altTexts?.[
                        workPage.language || "en"
                      ] || ""
                    }
                    class="h-10 w-auto"
                  />
                )}
              </>
            ))}
          </Customers>
        )
    }
  </HeroHeader>
    <ProjectMetadata
            duration={workPage.duration}
            collaboration={workPage.collaborationModel}
            services={workPage.services}
            technologies={workPage.technologies}>
        {
            workPage.technologies?.map((technology) => (
            <TechnologyIcon link={technology?.partner?.link ? getHrefFromLinkObject(technology.partner.link, lang, true) : undefined}>
                <SanityImg
                        src={technology?.logo?.default as SanityImageSource}
                        alt={technology?.logo?.default?.asset?.altTexts?.[workPage.language || "en"] || ""}
                        sizes="200px"
                        class="h-[unset] w-auto max-w-[unset] transition-transform duration-300 ease-in-out motion-safe:group-hover:scale-105"
                        loading="lazy"
                />
              <p>{technology.name}</p>
            </TechnologyIcon>
            ))
        }
    </ProjectMetadata>
  <SanityComponentsRenderer content={workPage?.content} />
  {workPage?.relatedCases && workPage?.relatedCases?.length > 1 && (
    <div
        class="relative xl:mb-40 flex flex-col py-20 xl:pr-12 before:-z-10 before:bg-light-blue-50 before:absolute before:top-0 before:bottom-0 before:-right-24 xl:before:right-0 before:h-full before:w-[3000px] xl:before:rounded-xl">
      <div class="text-black relative grid grid-cols-1 lg:grid-cols-2 w-full gap-8">
        {
          workPage?.relatedCases.splice(0,2).map((casePost) => (
              <CasePreview small caseData={casePost}/>
          ))
        }
      </div>
    </div>
  )}
</Base>
