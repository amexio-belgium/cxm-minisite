---
import Base from "@layouts/Base.astro";
import { serviceQuery } from "@api/queries";
import { imageBuilder, loadQuery } from "@api/sanity";
import SanityComponentsRenderer from "@components/cms-components/SanityComponentsRenderer.astro";
import { type ServiceWithReferences } from "src/sanity/custom.sanity.types";
import HeroHeader from "@components/uicomposition/HeroHeader.astro";
import Customers from "@components/uicomposition/Customers.astro";
import Faq from "@components/uicomposition/Faq.astro";
import FaqQuestion from "@components/uielements/FaqQuestion.astro";
import { PortableText } from "astro-portabletext";

export const prerender = false;
const { lang, slug } = Astro.params;
if (!lang || !slug) {
  return Astro.redirect("/404");
}

const { data: servicePage } = await loadQuery<ServiceWithReferences>({
  query: serviceQuery,
  params: { language: lang, slug: slug },
});
---

<Base
  title={servicePage?.metadata?.seo?.title || servicePage?.intro?.title!}
  description={servicePage?.metadata?.seo?.description || ""}
  language={lang.toLowerCase()}
  slug={slug}
  preview={true}
>
  <HeroHeader
    headline={servicePage.intro?.title}
    text={servicePage.intro?.intro}
    backgroundImage={servicePage?.image?.asset?._id}
  >
    <Customers headline="Customers we advised">
      {
        servicePage.customerReferences?.map((customer) => (
          <>
            {customer.logo?.default?.asset && (
              <img
                src={imageBuilder
                  .image(customer.logo?.default?.asset)
                  .height(80)
                  .url()}
                alt={
                  customer.logo.default.asset.altTexts?.[
                    servicePage.language || "en"
                  ] || ""
                }
                class="h-10 w-auto"
              />
            )}
          </>
        ))
      }
    </Customers>
  </HeroHeader>
  <SanityComponentsRenderer
    content={servicePage?.content}
    language={servicePage.language!}
  />

  {
    servicePage.faqs && (
      <Faq headline={servicePage.faqs.title || ""}>
        {servicePage.faqs.questions?.map((question) => (
          <>
            {question.question && (
              <FaqQuestion headline={question.question} headlineTag="h3">
                {question.answer && <PortableText value={question.answer} />}
              </FaqQuestion>
            )}
          </>
        ))}
      </Faq>
    )
  }
</Base>
