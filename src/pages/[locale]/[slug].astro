---
import Base from "@layouts/Base.astro";
import {
  allContentPagesQuery,
  contentPageQuery,
  siteConfigQuery,
} from "@api/queries";
import { loadQuery } from "@api/sanity";
import SanityComponentsRenderer from "@components/cms-components/SanityComponentsRenderer.astro";
import { type ContentPageWithReferences } from "src/sanity/custom.sanity.types";
import HeroHeader from "@components/uicomposition/HeroHeader.astro";
import type {
  AllContentPagesQueryResult,
  SiteConfigQueryResult,
} from "@sanity/sanity.types";

import { VISUAL_EDITING_ENABLED } from "@src/consts";
import { locales } from "@src/locales/consts";

const locale = Astro.currentLocale!;

export async function getStaticPaths() {
  if (!VISUAL_EDITING_ENABLED) {
    let pages: { params: { slug: string; locale: string } }[] = [];

    for (const language of locales) {
      const { data: contentPages } =
        await loadQuery<AllContentPagesQueryResult>({
          query: allContentPagesQuery,
          params: { language: language },
        });

      const slugs = contentPages.map((slug) => ({
        params: { slug: slug!, locale: language },
      }));

      pages = [...pages, ...slugs];
    }

    // sitemap({
    //   dynamicParams: getSitemapParams(services, getLocalePlaceholder()),
    // });

    return pages;
  } else {
    return [];
  }
}

const { slug } = Astro.params;

const { data: siteConfig } = await loadQuery<SiteConfigQueryResult>({
  query: siteConfigQuery,
  params: { language: locale },
});

if (!siteConfig) {
  return new Response(null, { status: 404 });
}

const { data: contentPage } = await loadQuery<ContentPageWithReferences>({
  query: contentPageQuery,
  params: { language: locale, slug: slug! },
});

if (contentPage == null) {
  return new Response(null, { status: 404 });
}
---

<Base
  title={`${contentPage?.metadata?.title || contentPage?.intro?.title!} - ${siteConfig.siteName}`}
  description={contentPage?.metadata?.description || ""}
  slug={slug!}
  siteConfig={siteConfig}
  translations={contentPage?._translations}
>
  <HeroHeader
    headline={contentPage?.intro?.title}
    text={contentPage?.intro?.intro}
  />
  <SanityComponentsRenderer content={contentPage?.content} />
</Base>
