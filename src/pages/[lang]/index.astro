---
import { i18nParams } from '../../i18n/consts'
import { useTranslations } from '../../i18n/utils';
import Base from '@layouts/Base.astro';
import HeroHeader from '@components/uicomposition/HeroHeader.astro';
import ProjectOverview from '@components/uicomposition/ProjectOverview.astro'
import InsightsTeaser from '@components/uicomposition/InsightsTeaser.astro';
import Button from '@components/uielements/Button.astro';
import Painpoint from '@components/graphicelements/painpoint.astro';
import Strategize from '@components/graphicelements/strategize.astro';
import Design from '@components/graphicelements/design.astro';
import Realize from '@components/graphicelements/realize.astro';
import Optimize from '@components/graphicelements/optimize.astro';
import TilesContainer from '@components/uicomposition/TilesContainer.astro';
import SmallTile from '@components/uielements/SmallTile.astro';
import slant from "@assets/images/slantwithimage.png"
import Image from 'astro/components/Image.astro';

export function getStaticPaths() {
	return i18nParams;
}

const { lang } = Astro.params;
const t = useTranslations(lang, 'home');
---
<Base title={t('home.title')} description={t('home.seoDescription')}>
  <HeroHeader 
      headline={t('hero.headline')}
      text={t('hero.text')}
      homepage>
    <Button class="mt-8" longText icon="email" link="/contact" style="primary" color="dark">{t('hero.button')}</Button>
  </HeroHeader>

  <ProjectOverview />
  
  <TilesContainer 
    headline={t('painpoint.headline')} 
    description={t('painpoint.description')} >
    <SmallTile 
      headline={t('painpoint1.headline')} 
      description={t('painpoint1.description')} >
      <Painpoint class="fill-white overflow-visible w-20 h-20" />
    </SmallTile>
    <SmallTile 
      headline={t('painpoint2.headline')} 
      description={t('painpoint2.description')} >
      <Painpoint class="fill-white overflow-visible w-20 h-20" />
    </SmallTile>
    <SmallTile 
      headline={t('painpoint3.headline')} 
      description={t('painpoint3.description')} >
      <Painpoint class="fill-white overflow-visible w-20 h-20" />
    </SmallTile>
    <div slot="bg-image" class="absolute -z-10 w-[250%] md:w-[1240px] h-[1000px] -right-3/4 sm:-right-full lg:-right-1/3 -bottom-20 md:-top-20 bg-contain bg-no-repeat">
      <Image loading="lazy" src={slant} alt="" />
    </div>
  </TilesContainer>
  
  <div class="relative flex flex-col py-20 xl:mb-40 before:bg-light-blue-50 before:-z-10 before:absolute before:top-0 before:bottom-0 before:-left-12 marker:before:h-full before:w-[3000px] lg:before:rounded-xl">
    <div class="flex flex-col items-start justify-between w-full gap-4 mb-8 md:mb-4 md:items-center md:flex-row">
      <h2 class="font-serif text-2xl" set:html={t('services.headline')}></h2>
      <Button class="hidden md:inline" link="/services" color="light">{t('services.button')}</Button>
    </div>
    <div class="flex flex-col items-start w-full mb-20 md:w-9/12 h-fit">
      <p class="text-base text-black font-light" set:html={t('services.descriptionP1')}></p>
      <p class="text-base text-black font-light" set:html={t('services.descriptionP2')}></p>
    </div>
    <div class="services flex flex-row flex-wrap justify-between w-full gap-8 lg:flex-row lg:flex-nowrap">
      <div class="service__item motion-safe:animate-delay-[250ms] inline-flex flex-col items-center justify-start w-full gap-8 md:w-5/12 lg:w-full">
        <Strategize class="overflow-visible w-20 h-20" />
        <div class="flex flex-col items-center justify-start gap-4">
          <div class="font-serif text-xl text-center " set:html={t('services1.headline')}></div>
          <div class="text-base font-light text-center" set:html={t('services1.description')}></div>
        </div>
      </div>
      <div class="service__item motion-safe:animate-delay-500 inline-flex flex-col items-center justify-start w-full gap-8 md:w-5/12 lg:w-full">
        <Design class="overflow-visible w-20 h-20" />
        <div class="flex flex-col items-center justify-start gap-4">
          <div class="font-serif text-xl text-center " set:html={t('services2.headline')}></div>
          <div class="text-base font-light text-center" set:html={t('services2.description')}></div>
        </div>
      </div>
      <div class="service__item motion-safe:animate-delay-[750ms] inline-flex flex-col items-center justify-start w-full gap-8 md:w-5/12 lg:w-full">
        <Realize class="overflow-visible w-20 h-20" />
        <div class="flex flex-col items-center justify-start gap-4">
          <div class="font-serif text-xl text-center " set:html={t('services3.headline')}></div>
          <div class="text-base font-light text-center" set:html={t('services3.description')}></div>
        </div>
      </div>
      <div class="service__item motion-safe:animate-delay-1000 inline-flex flex-col items-center justify-start w-full gap-8 md:w-5/12 lg:w-full">
        <Optimize class="overflow-visible w-20 h-20" />
        <div class="flex flex-col items-center justify-start gap-4">
          <div class="font-serif text-xl text-center " set:html={t('services4.headline')}></div>
          <div class="text-base font-light text-center" set:html={t('services4.description')}></div>
        </div>
      </div>
      <Button class="mt-8 mx-auto visible md:hidden" link="/services" color="light">{t('services.button')}</Button>
    </div>
  </div>

  <script>
    const services = document.querySelector(`.services`);
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting && services) {
          const items = services.querySelectorAll(".service__item")
          items.forEach(item => {
            item.classList.add('motion-safe:animate-fade-up');
            item.classList.add('lg:motion-safe:animate-fade-right');
          })
          observer.unobserve(services);
        }
      });
    });
  
    services && observer.observe(services);
  </script>

  <InsightsTeaser />

</Base>

