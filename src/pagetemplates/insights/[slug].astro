---
import Base from "@layouts/Base.astro";
import {
  allInsightPagesQuery,
  blogPostQuery,
  siteConfigQuery,
} from "@api/queries";
import { loadQuery } from "@api/sanity";
import SanityComponentsRenderer from "@components/cms-components/SanityComponentsRenderer.astro";
import { type BlogPostWithReferences } from "src/sanity/custom.sanity.types";
import HeroHeader from "@components/uicomposition/HeroHeader.astro";

import ProfileCard from "@components/uielements/ProfileCard.astro";
import FormattedDate from "@components/uielements/FormattedDate.astro";
import type {
  AllInsightPagesQueryResult,
  SiteConfigQueryResult,
} from "@sanity/sanity.types";
import { VISUAL_EDITING_ENABLED } from "@src/consts";
import type { Image } from "sanity";
import { stegaClean } from "@sanity/client/stega";

const locale = Astro.currentLocale!;

export async function getStaticPaths() {
  const staticLocale = "replaceMeWithLocale";

  if (!VISUAL_EDITING_ENABLED) {
    const { data: insights } = await loadQuery<AllInsightPagesQueryResult>({
      query: allInsightPagesQuery,
      params: { language: staticLocale },
    });

    const slugs = insights.map((slug) => ({
      params: { slug: slug!, locale: staticLocale },
    }));

    return slugs;
  } else {
    return [];
  }
}

const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect("/404");
}

const { data: siteConfig } = await loadQuery<SiteConfigQueryResult>({
  query: siteConfigQuery,
  params: { language: locale },
});

if (!siteConfig) {
  return new Response(null, { status: 404 });
}

const { data: blogPost } = await loadQuery<BlogPostWithReferences>({
  query: blogPostQuery,
  params: { language: locale, slug: slug },
});
---

<Base
  title={blogPost?.metadata?.title || blogPost?.intro?.title!}
  description={blogPost?.metadata?.description || ""}
  slug={slug}
  siteConfig={siteConfig}
  translations={blogPost?._translations}
  routeMap="insights"
  noIndex={blogPost?.metadata?.noIndex}
  seoImage={blogPost?.metadata?.image as Image}
  customCanonicals={blogPost?.metadata?.canonicals}
>
  <HeroHeader
    headline={blogPost.intro?.title}
    backgroundImage={blogPost?.featuredImage}
  >
    <div class="mt-8 flex flex-row flex-wrap items-center gap-4 text-white">
      <FormattedDate
        class="font-serif text-base"
        date={new Date(blogPost.publicationDate || blogPost._createdAt)}
        transition:name={blogPost.metadata?.slug?.current + "_date"}
      />
      {
        blogPost.topic && (
          <div class="flex flex-row before:mr-4 before:font-sans before:text-secondary before:content-['/']">
            <p class="break-words font-serif text-base uppercase">
              {blogPost.topic.map((topic) => stegaClean(topic.prefLabel))}
            </p>
          </div>
        )
      }
      {
        blogPost.postType && (
          <div class="flex flex-row before:mr-4 before:font-sans before:text-secondary before:content-['/']">
            <p class="break-words font-serif text-base uppercase">
              {blogPost.postType.map((type) => stegaClean(type.prefLabel))}
            </p>
          </div>
        )
      }
    </div>
  </HeroHeader>
  {
    blogPost.author && blogPost.author.name && (
      <ProfileCard
        name={blogPost.author.name}
        title={blogPost.author.jobTitle}
        direction="right"
        profileImg={blogPost.author.image}
        hideButton
        sharing
        class="-mt-8 w-full motion-safe:animate-fade-up motion-safe:animate-delay-200 md:-mt-4 lg:-mt-8"
      />
    )
  }
  <SanityComponentsRenderer content={blogPost?.content} />
</Base>
