---
import { allCasePagesQuery, siteConfigQuery, workQuery } from "@api/queries";
import { loadQuery } from "@api/sanity";
import SanityComponentsRenderer from "@components/cms-components/SanityComponentsRenderer.astro";
import Customers from "@components/uicomposition/Customers.astro";
import HeroHeader from "@components/uicomposition/HeroHeader.astro";
import ProjectMetadata from "@components/uicomposition/ProjectMetadata.astro";
import CasePreview from "@components/uielements/CasePreview.astro";
import TechnologyIcon from "@components/uielements/TechnologyIcon.astro";
import Base from "@layouts/Base.astro";
import { getHrefFromLinkObject } from "@lib/sanityHelpers";
import SanityImg from "@otterstack/sanity-img-astro";
import type { WorkWithReferences } from "@sanity/custom.sanity.types";

import type { SanityImageSource } from "@sanity/image-url/lib/types/types";
import type {
  AllCasePagesQueryResult,
  SiteConfigQueryResult,
} from "@sanity/sanity.types";
import { VISUAL_EDITING_ENABLED } from "@src/consts";
import type { Image } from "sanity";

const locale = Astro.currentLocale!;

export async function getStaticPaths() {
  const staticLocale = "replaceMeWithLocale";

  if (!VISUAL_EDITING_ENABLED) {
    const { data: cases } = await loadQuery<AllCasePagesQueryResult>({
      query: allCasePagesQuery,
      params: { language: staticLocale },
    });

    const slugs = cases.map((slug) => ({
      params: { slug: slug!, locale: staticLocale },
    }));

    return slugs;
  } else {
    return [];
  }
}

const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect(`/${locale}/404`);
}

const { data: siteConfig } = await loadQuery<SiteConfigQueryResult>({
  query: siteConfigQuery,
  params: { language: locale },
});

if (!siteConfig) {
  return new Response(null, { status: 404 });
}

const { data: casePage } = await loadQuery<WorkWithReferences>({
  query: workQuery,
  params: { language: locale, slug: slug },
});
---

<Base
  title={`${casePage?.metadata?.title || casePage?.intro?.title!} - ${siteConfig.siteName}`}
  description={casePage?.metadata?.description || ""}
  slug={slug}
  siteConfig={siteConfig}
  translations={casePage?._translations}
  routeMap="work"
  noIndex={casePage?.metadata?.noIndex}
  seoImage={casePage?.metadata?.image as Image}
>
  <HeroHeader
    headline={casePage?.intro?.title}
    text={casePage?.intro?.intro}
    backgroundImage={casePage.introImage}
    client={casePage?.company?.name}
  >
    {
      casePage?.customerReferences &&
        casePage.customerReferences.length > 0 && (
          <Customers headline={casePage.customerReferencesText}>
            {casePage.customerReferences?.map((customer) => (
              <>
                {customer?.logo?.default?.asset && (
                  <SanityImg
                    src={customer?.logo?.default}
                    alt={
                      customer?.logo?.default?.asset?.altTexts?.[locale] || ""
                    }
                    class="h-10 w-auto"
                    width="120"
                    height="80"
                  />
                )}
              </>
            ))}
          </Customers>
        )
    }
  </HeroHeader>
  <ProjectMetadata
    duration={casePage?.duration}
    collaboration={casePage?.collaborationModel}
    services={casePage?.services}
    technologies={casePage?.technologies}
    coreTechnology={casePage?.coreTechnology}
  >
    {
      casePage?.technologies?.map((technology) => (
        <TechnologyIcon
          link={
            technology?.partner?.link
              ? getHrefFromLinkObject(technology.partner.link, locale)
              : undefined
          }
        >
          {technology?.logo?.default?.asset._id && (
            <SanityImg
              src={technology?.logo?.default as SanityImageSource}
              alt={
                technology?.logo?.default?.asset?.altTexts?.[
                  casePage.language || "en"
                ] || ""
              }
              sizes="200px"
              class="h-[unset] w-auto max-w-[unset] transition-transform duration-300 ease-in-out motion-safe:group-hover:scale-105"
              loading="lazy"
              width="120"
              height="80"
            />
          )}

          <p>{technology.name}</p>
        </TechnologyIcon>
      ))
    }
  </ProjectMetadata>
  <SanityComponentsRenderer content={casePage?.content} />
  {
    casePage?.relatedCases && casePage?.relatedCases?.length > 1 && (
      <div class="relative flex flex-col py-20 before:absolute before:-right-24 before:bottom-0 before:top-0 before:-z-10 before:h-full before:w-[3000px] before:bg-light-blue-50 xl:mb-40 xl:pr-12 xl:before:right-0 xl:before:rounded-xl">
        <div class="relative grid w-full grid-cols-1 gap-8 text-black lg:grid-cols-2">
          {casePage?.relatedCases.splice(0, 2).map((casePost) => (
            <CasePreview small caseData={casePost} />
          ))}
        </div>
      </div>
    )
  }
</Base>
