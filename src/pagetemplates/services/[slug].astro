---
import Base from "@layouts/Base.astro";
import {
  allServicePagesQuery,
  serviceQuery,
  siteConfigQuery,
} from "@api/queries";
import { loadQuery } from "@api/sanity";
import SanityComponentsRenderer from "@components/cms-components/SanityComponentsRenderer.astro";
import { type ServiceWithReferences } from "src/sanity/custom.sanity.types";
import HeroHeader from "@components/uicomposition/HeroHeader.astro";
import Customers from "@components/uicomposition/Customers.astro";
import type {
  AllServicePagesQueryResult,
  SiteConfigQueryResult,
} from "@sanity/sanity.types";
import { VISUAL_EDITING_ENABLED } from "@src/consts";
import type { Image } from "sanity";
import SanityImg from "@otterstack/sanity-img-astro";

const locale = Astro.currentLocale!;

export async function getStaticPaths() {
  const staticLocale = "replaceMeWithLocale";

  if (!VISUAL_EDITING_ENABLED) {
    const { data: services } = await loadQuery<AllServicePagesQueryResult>({
      query: allServicePagesQuery,
      params: { language: staticLocale },
    });

    const slugs = services.map((slug) => ({
      params: { slug: slug!, locale: staticLocale },
    }));

    return slugs;
  } else {
    return [];
  }
}

const { slug } = Astro.params;

const { data: siteConfig } = await loadQuery<SiteConfigQueryResult>({
  query: siteConfigQuery,
  params: { language: locale },
});

if (!siteConfig) {
  return new Response(null, { status: 404 });
}

const { data: servicePage } = await loadQuery<ServiceWithReferences>({
  query: serviceQuery,
  params: { language: locale, slug: slug! },
});

if (servicePage == null) {
  return new Response(null, { status: 404 });
}
---

<Base
  title={`${servicePage?.metadata?.title || servicePage?.intro?.title!} - ${siteConfig.siteName}`}
  description={servicePage?.metadata?.description || ""}
  slug={slug!}
  siteConfig={siteConfig}
  routeMap="services"
  translations={servicePage?._translations}
  noIndex={servicePage?.metadata?.noIndex}
  seoImage={servicePage?.metadata?.image as Image}
>
  <HeroHeader
    headline={servicePage.intro?.title}
    text={servicePage.intro?.intro}
    backgroundImage={servicePage?.image}
  >
    {
      servicePage.customerReferences &&
        servicePage.customerReferences.length > 0 && (
          <Customers headline={servicePage.customerReferencesText}>
            {servicePage.customerReferences?.map((customer: any) => (
              <>
                {customer?.logo?.light?.asset && (
                  <SanityImg
                    src={customer.logo.light}
                    alt={customer.logo.light.asset.altTexts?.[locale] || ""}
                    class="h-10 w-auto"
                    width="120"
                    height="80"
                  />
                )}
              </>
            ))}
          </Customers>
        )
    }
  </HeroHeader>
  <SanityComponentsRenderer content={servicePage?.content} />
</Base>
