---
import Base from "@layouts/Base.astro";
import {
  allContentPagesQuery,
  contentPageQuery,
  siteConfigQuery,
} from "@api/queries";
import { loadQuery } from "@api/sanity";
import SanityComponentsRenderer from "@components/cms-components/SanityComponentsRenderer.astro";
import { type ContentPageWithReferences } from "src/sanity/custom.sanity.types";
import HeroHeader from "@components/uicomposition/HeroHeader.astro";
import type {
  AllContentPagesQueryResult,
  SiteConfigQueryResult,
} from "@sanity/sanity.types";

import { VISUAL_EDITING_ENABLED } from "@src/consts";
import type { Image } from "sanity";

const locale = Astro.currentLocale!;

export async function getStaticPaths() {
  const staticLocale = "replaceMeWithLocale";

  if (!VISUAL_EDITING_ENABLED) {
    const { data: contentPages } = await loadQuery<AllContentPagesQueryResult>({
      query: allContentPagesQuery,
      params: { language: staticLocale },
    });

    const slugs = contentPages.map((slug) => ({
      params: { slug: slug!, locale: staticLocale },
    }));

    return slugs;
  } else {
    return [];
  }
}

const { slug } = Astro.params;

const { data: siteConfig } = await loadQuery<SiteConfigQueryResult>({
  query: siteConfigQuery,
  params: { language: locale },
});

if (!siteConfig) {
  return new Response(null, { status: 404 });
}

const { data: contentPage } = await loadQuery<ContentPageWithReferences>({
  query: contentPageQuery,
  params: { language: locale, slug: slug! },
});

if (contentPage == null) {
  return new Response(null, { status: 404 });
}
---

<Base
  title={`${contentPage?.metadata?.title || contentPage?.intro?.title!} - ${siteConfig.siteName}`}
  description={contentPage?.metadata?.description || ""}
  slug={slug!}
  siteConfig={siteConfig}
  translations={contentPage?._translations}
  noIndex={contentPage?.metadata?.noIndex}
  seoImage={contentPage?.metadata?.image as Image}
>
  <HeroHeader
    headline={contentPage?.intro?.title}
    text={contentPage?.intro?.intro}
  />
  <SanityComponentsRenderer content={contentPage?.content} />
</Base>
