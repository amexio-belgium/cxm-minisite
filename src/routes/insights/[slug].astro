---
import Base from "@layouts/Base.astro";
import {
  allInsightPagesQuery,
  blogPostQuery,
  siteConfigQuery,
} from "@api/queries";
import { loadQuery } from "@api/sanity";
import SanityComponentsRenderer from "@components/cms-components/SanityComponentsRenderer.astro";
import { type BlogPostWithReferences } from "src/sanity/custom.sanity.types";
import HeroHeader from "@components/uicomposition/HeroHeader.astro";

import ProfileCard from "@components/uielements/ProfileCard.astro";
import FormattedDate from "@components/uielements/FormattedDate.astro";
import type {
  AllInsightPagesQueryResult,
  SiteConfigQueryResult,
} from "@sanity/sanity.types";
import { getLocale, getLocalePlaceholder } from "i18n:astro";
import { VISUAL_EDITING_ENABLED } from "@src/consts";
import sitemap from "i18n:astro/sitemap";
import { getSitemapParams } from "@lib/sitemap";

export async function getStaticPaths() {
  if (!VISUAL_EDITING_ENABLED) {
    const { data: insights } = await loadQuery<AllInsightPagesQueryResult>({
      query: allInsightPagesQuery,
      params: { language: getLocalePlaceholder() },
    });

    sitemap({
      dynamicParams: getSitemapParams(insights, getLocalePlaceholder()),
    });

    return insights.map((slug) => ({
      params: { slug },
    }));
  } else {
    return [];
  }
}

const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect("/404");
}

const { data: siteConfig } = await loadQuery<SiteConfigQueryResult>({
  query: siteConfigQuery,
  params: { language: getLocale() },
});

if (!siteConfig) {
  return new Response(null, { status: 404 });
}

const { data: blogPost } = await loadQuery<BlogPostWithReferences>({
  query: blogPostQuery,
  params: { language: getLocale(), slug: slug },
});
---

<Base
  title={blogPost?.metadata?.title || blogPost?.intro?.title!}
  description={blogPost?.metadata?.description || ""}
  slug={slug}
  siteConfig={siteConfig}
  translations={blogPost._translations}
  routeMap="insights"
>
  <HeroHeader
    headline={blogPost.intro?.title}
    text={blogPost.intro?.intro}
    backgroundImage={blogPost?.featuredImage?.asset?._id}
  >
    <div class="mt-8 flex flex-row items-center gap-4 text-white">
      <FormattedDate
        class="font-serif text-base"
        date={new Date(blogPost.publicationDate || blogPost._createdAt)}
        transition:name={blogPost.metadata?.slug?.current + "_date"}
      />
      {
        blogPost.topic && (
          <p class="font-serif text-base uppercase before:mr-4 before:font-sans before:text-secondary before:content-['/']">
            {blogPost.topic.map((topic) => topic.prefLabel)}
          </p>
        )
      }
    </div>
  </HeroHeader>
  {
    blogPost.author && blogPost.author.name && (
      <ProfileCard
        name={blogPost.author.name}
        title={blogPost.author.jobTitle}
        direction="right"
        profileImg={blogPost.author.image}
        hideButton
        sharing
        class="-mt-8 mb-8 w-full motion-safe:animate-fade-up motion-safe:animate-delay-500 lg:-mt-16 lg:mb-8"
      />
    )
  }
  <SanityComponentsRenderer content={blogPost?.content} />
</Base>
