---
import { allCasePagesQuery, siteConfigQuery, workQuery } from "@api/queries";
import { loadQuery, imageBuilder } from "@api/sanity";
import SanityComponentsRenderer from "@components/cms-components/SanityComponentsRenderer.astro";
import Customers from "@components/uicomposition/Customers.astro";
import HeroHeader from "@components/uicomposition/HeroHeader.astro";
import ProjectMetadata from "@components/uicomposition/ProjectMetadata.astro";
import CasePreview from "@components/uielements/CasePreview.astro";
import TechnologyIcon from "@components/uielements/TechnologyIcon.astro";
import Base from "@layouts/Base.astro";
import { getHrefFromLinkObject } from "@lib/sanityHelpers";
import { getSitemapParams } from "@lib/sitemap";
import SanityImg from "@otterstack/sanity-img-astro";
import type { WorkWithReferences } from "@sanity/custom.sanity.types";

import type { SanityImageSource } from "@sanity/image-url/lib/types/types";
import type {
  AllCasePagesQueryResult,
  SiteConfigQueryResult,
} from "@sanity/sanity.types";
import { VISUAL_EDITING_ENABLED } from "@src/consts";
import { getLocale, getLocalePlaceholder } from "i18n:astro";
import sitemap from "i18n:astro/sitemap";

export async function getStaticPaths() {
  if (!VISUAL_EDITING_ENABLED) {
    const { data: cases } = await loadQuery<AllCasePagesQueryResult>({
      query: allCasePagesQuery,
      params: { language: getLocalePlaceholder() },
    });

    sitemap({
      dynamicParams: getSitemapParams(cases, getLocalePlaceholder()),
    });

    return cases.map((slug) => ({
      params: { slug },
    }));
  } else {
    return [];
  }
}

const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect("/404");
}

const { data: siteConfig } = await loadQuery<SiteConfigQueryResult>({
  query: siteConfigQuery,
  params: { language: getLocale() },
});

if (!siteConfig) {
  return new Response(null, { status: 404 });
}

const { data: casePage } = await loadQuery<WorkWithReferences>({
  query: workQuery,
  params: { language: getLocale(), slug: slug },
});
---

<Base
  title={`${casePage?.metadata?.title || casePage?.intro?.title!} - ${siteConfig.siteName}`}
  description={casePage?.metadata?.description || ""}
  slug={slug}
  siteConfig={siteConfig}
  translations={casePage._translations}
  routeMap="cases"
>
  <HeroHeader
    headline={casePage?.intro?.title}
    text={casePage?.intro?.intro}
    backgroundImage={casePage?.image?.asset?._id}
  >
    {
      casePage?.customerReferences &&
        casePage.customerReferences.length > 0 && (
          <Customers headline={casePage.customerReferencesText}>
            {casePage.customerReferences?.map((customer) => (
              <>
                {customer?.logo?.default?.asset && (
                  <img
                    src={imageBuilder
                      .image(customer?.logo?.default?.asset)
                      .height(80)
                      .url()}
                    alt={
                      customer.logo.default.asset.altTexts?.[
                        casePage.language || "en"
                      ] || ""
                    }
                    class="h-10 w-auto"
                  />
                )}
              </>
            ))}
          </Customers>
        )
    }
  </HeroHeader>
  <ProjectMetadata
    duration={casePage.duration}
    collaboration={casePage.collaborationModel}
    services={casePage.services}
    technologies={casePage.technologies}
  >
    {
      casePage.technologies?.map((technology) => (
        <TechnologyIcon
          link={
            technology?.partner?.link
              ? getHrefFromLinkObject(technology.partner.link, getLocale())
              : undefined
          }
        >
          <SanityImg
            src={technology?.logo?.default as SanityImageSource}
            alt={
              technology?.logo?.default?.asset?.altTexts?.[
                casePage.language || "en"
              ] || ""
            }
            sizes="200px"
            class="h-[unset] w-auto max-w-[unset] transition-transform duration-300 ease-in-out motion-safe:group-hover:scale-105"
            loading="lazy"
          />
          <p>{technology.name}</p>
        </TechnologyIcon>
      ))
    }
  </ProjectMetadata>
  <SanityComponentsRenderer content={casePage?.content} />
  {
    casePage?.relatedCases && casePage?.relatedCases?.length > 1 && (
      <div class="relative flex flex-col py-20 before:absolute before:-right-24 before:bottom-0 before:top-0 before:-z-10 before:h-full before:w-[3000px] before:bg-light-blue-50 xl:mb-40 xl:pr-12 xl:before:right-0 xl:before:rounded-xl">
        <div class="relative grid w-full grid-cols-1 gap-8 text-black lg:grid-cols-2">
          {casePage?.relatedCases.splice(0, 2).map((casePost) => (
            <CasePreview small caseData={casePost} />
          ))}
        </div>
      </div>
    )
  }
</Base>
