---
import { useTranslations } from "src/i18n/utils";
import { Picture, Image } from "astro:assets";
import Button from "@components/uielements/Button.astro";

const { lang } = Astro.params;

const { caseData, small, link } = Astro.props;

const t = useTranslations(lang, "work");

let caseImage;

if (caseData.heroImage.includes("/projects/")) {
  const projectImages = import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/projects/{,**/}*.{jpeg,jpg,png,gif}",
  );
  if (!projectImages[caseData.heroImage])
    throw new Error(
      `"${caseData.heroImage}" does not exist in glob: "src/assets/projects/{,**/}*.{jpeg,jpg,png,gif}" or "src/assets/projects/*.{jpeg,jpg,png,gif}"`,
    );
  caseImage = projectImages[caseData.heroImage]();
} else {
  const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/images/{,**/}*.{jpeg,jpg,png,gif}",
  );
  if (!images[caseData.heroImage])
    throw new Error(
      `"${caseData.heroImage}" does not exist in glob: "src/assets/images/{,**/}*.{jpeg,jpg,png,gif}" or "src/assets/projects/*.{jpeg,jpg,png,gif}"`,
    );
  caseImage = images[caseData.heroImage]();
}

const logoimages = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/logos/{,**/}*.{jpeg,jpg,png,gif}",
);
if (!logoimages[caseData.logo])
  throw new Error(
    `"${caseData.logo}" does not exist in glob: "src/assets/logos/{,**/}*.{jpeg,jpg,png,gif}"`,
  );
---

<div
  class:list={[
    "group flex flex-col justify-stretch gap-8 motion-safe:animate-fade-up motion-safe:animate-delay-1000",
    small ? "items-stretch" : "w-full md:flex-row",
  ]}
>
  <div
    class:list={[
      "flex w-full items-center justify-center overflow-hidden rounded-t-xl transition-all motion-safe:group-hover:shadow-xl",
      small ? "max-h-[400px]" : "md:w-1/2 md:rounded-l-xl md:rounded-tr-none",
    ]}
  >
    <Picture
      src={caseImage}
      alt={caseData.altTextImage || ""}
      widths={[400, 600, 790]}
      sizes="(max-width: 790px) 100vw, 790px"
      class="h-[unset] min-h-full w-auto min-w-full max-w-[unset] shrink-0 transition-transform duration-300 ease-in-out motion-safe:group-hover:scale-105"
      loading="lazy"
    />
  </div>
  <div
    class:list={[
      "flex max-h-full w-full flex-col justify-between gap-8 border-b-2 border-y-quaternary pb-8",
      small ? "h-3/4 md:px-4" : "px-4 md:w-1/2 md:border-y-2 md:p-8",
    ]}
  >
    <div class="flex flex-col gap-2">
      <div class="mb-4 flex flex-row items-start justify-between gap-8">
        <div class="flex flex-col">
          <span class="font-serif text-primary" set:html={caseData.client} />
          <h2
            class="caseheadline mb-2 font-serif text-xl [&>mark]:bg-none [&>mark]:bg-clip-border [&>mark]:text-black"
            set:html={caseData.title}
          />
        </div>
        {
          caseData.logo && (
            <Image
              loading="lazy"
              src={logoimages[caseData.logo]()}
              class="h-12 w-auto shrink-0 sm:h-16 md:h-12 xl:h-16"
              loading="lazy"
              height={60}
              alt={caseData.client || caseData.title}
            />
          )
        }
      </div>
      <p
        class="text-sm font-light [&>mark]:text-black"
        set:html={caseData.description}
      />
      <ol class="mt-2 list-inside list-disc font-serif text-sm">
        {
          caseData.duration && (
            <li class="">
              {t("metadata.duration") + ": " + caseData.duration}
            </li>
          )
        }
        {
          caseData.collaboration && (
            <li class="">
              {t("metadata.collaboration") + ": " + caseData.collaboration}
            </li>
          )
        }
        {
          caseData.technologies && (
            <li class="">
              {t("metadata.technologies") + ": " + caseData.technologies}
            </li>
          )
        }
        {
          caseData.services && (
            <li class="">
              {t("metadata.services") + ": " + caseData.services}
            </li>
          )
        }
      </ol>
    </div>
    <Button
      class="self-end"
      link={link}
      style="primary"
      size="sm"
      color="light"
    >
      {t("overview.cta")}
    </Button>
  </div>
</div>
