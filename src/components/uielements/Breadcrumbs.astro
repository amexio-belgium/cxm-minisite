---
import { defaultComponents } from "@components/cms-components/PortableText/helper";
import { parseHref } from "@lib/helpers";
import {
  BASE_PATH,
  servicesPageName,
  worksPageName,
  insightsPageName,
} from "@src/consts";
import * as m from "@src/paraglide/messages";
import { PortableText } from "astro-portabletext";

interface Props {
  pageTitle?: string | any[];
}

const { pageTitle } = Astro.props;

const basePathLength = BASE_PATH && BASE_PATH !== "" ? BASE_PATH.length + 1 : 1;
const pathNameAsLocale = Astro.url.pathname.substring(basePathLength);

const paths = pathNameAsLocale.split("/").filter((x) => x);
const locale = Astro.currentLocale!;

const servicesPath = new RegExp(`/${servicesPageName}/\\S+`);
const casesPath = new RegExp(`/${worksPageName}/\\S+`);
const insightsPath = new RegExp(`/${insightsPageName}/\\S+`);

let parts: { text: string; href: string }[] = [
  {
    text: m.breadcrumbHome(),
    href: `/${locale}/`,
  },
];

function capitalizeFirstLetter(string: string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

paths.forEach((text, i) => {
  const href = `/${paths.slice(0, i + 1).join("/")}`;
  if (i !== 0) {
    let translatedText: string = "";
    if (
      !(
        i == paths.length - 1 &&
        (servicesPath.test(pathNameAsLocale) ||
          casesPath.test(pathNameAsLocale) ||
          insightsPath.test(pathNameAsLocale))
      )
    ) {
      translatedText =
        m["nav" + capitalizeFirstLetter(text.replace(/[-_]/g, " "))];
    }

    parts.push({
      text: translatedText,
      href: href + "/",
    });
  }
});

const removeTrailingSlash = (text: string) => {
  return text.endsWith("/") && text.length > 1 ? text.slice(0, -1) : text;
};
---

{
  parts.length > 1 && (
    <nav aria-label={m.breadcrumbLabel()}>
      <ol
        class="mb-8 flex flex-row flex-wrap gap-1 pl-2 text-white md:-ms-2 md:mb-0"
        role="list"
      >
        {parts.map(({ text, href, ...attrs }, index) => (
          <li class="text-regular flex items-center gap-2" role="listitem">
            {index !== parts.length - 1 ? (
              <>
                <a
                  href={parseHref(href)}
                  {...attrs}
                  aria-current={href === pathNameAsLocale && "page"}
                  class="bg-gradient-to-r from-tertiary from-0% via-tertiary via-50% to-white to-50% bg-[length:200%_100%] bg-clip-text bg-[100%] text-xs capitalize text-transparent underline decoration-white decoration-1 underline-offset-2 outline-none transition-all duration-300 hover:bg-[0%_100%] hover:decoration-tertiary focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-yellow-500 motion-reduce:transition-none md:py-2"
                >
                  {text}
                </a>
                <svg
                  class="h-6 w-6 fill-white"
                  aria-hidden="true"
                  focusable="false"
                >
                  <use
                    xlink:href={parseHref(
                      "/icons/icon-sprite.svg#icon-chevron-right",
                    )}
                  />
                </svg>
              </>
            ) : (
              <span
                {...attrs}
                aria-current={
                  removeTrailingSlash(href) ===
                    removeTrailingSlash(pathNameAsLocale) && "page"
                }
                class="!mb-0 text-xs capitalize outline-none md:py-2"
              >
                {Array.isArray(pageTitle) ? (
                  <PortableText value={pageTitle} />
                ) : (
                  pageTitle
                )}
              </span>
            )}
          </li>
        ))}
      </ol>
    </nav>
  )
}
