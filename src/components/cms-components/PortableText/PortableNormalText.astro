---
import type { Block, Props as PortableProps } from "astro-portabletext/types";
import Link from "@components/uielements/Link.astro";

interface Props extends PortableProps<Block> {}

const props = Astro.props;
import { isPreview } from "src/stores/global-store";

const markTags = {
  strong: ["<strong class='font-semibold'>", "</strong>"],
  em: ["<em>", "</em>"],
  underline: ["<u>", "</u>"],
  "strike-through": ["<s>", "</s>"],
  mark: ["<mark>", "</mark>"]
};
---

{
  props.node.children.map((child) => {
    let openingTags = "";
    let closingTags = "";

    child.marks?.forEach((mark: string) => {
      if (markTags[mark]) {
        openingTags += markTags[mark][0];
        closingTags = markTags[mark][1] + closingTags;
      }
    });

    // Check for links in markDefs
    const linkMarkDef = props.node.markDefs?.find(
      (markDef) => child.marks?.includes(markDef._key) && markDef._type === "link"
    );

    if (linkMarkDef) {
      const href = linkMarkDef.type === "external"
        ? linkMarkDef.url
        : linkMarkDef.internalLink && `${isPreview.get() ? "/preview" : ""}/${linkMarkDef.internalLink?.language}/${linkMarkDef.internalLink?.metadata?.slug?.current}`;

      return <Link
          className="no-underline outline-none content-none before:absolute before:inset-x-0 before:inset-y-0 focus-visible:ring-0"
          href={href}
          target={linkMarkDef.blank}
          hoverColor="yellow"
          set:html={openingTags + child.text + closingTags}
        />
    }

    return (
      <span
        class="text-balance font-sans text-sm font-light sm:text-base"
        set:html={openingTags + child.text + closingTags}
      />
    );
  })
}
