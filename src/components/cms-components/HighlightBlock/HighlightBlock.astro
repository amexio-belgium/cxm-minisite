---
import type { HighlightReferenced } from "@sanity/custom.sanity.types";
import { PortableText } from "astro-portabletext";
import { getHrefFromLinkObject } from "@lib/sanityHelpers";
import Button from "@components/uielements/Button.astro";
import { defaultComponents } from "../PortableText/helper";
import SanityImg from "@otterstack/sanity-img-astro";

interface Props {
  highlight: HighlightReferenced;
}

const locale = Astro.currentLocale!;
const { highlight } = Astro.props;

const styles = {
  popping:
    "yellow py-6 pr-6 sm:pr-20 -mt-6 md:mr-8 relative md:absolute md:bottom-12 w-full md:w-5/12 before:shadow-xl md:h-fit before:-z-10 md:before:h-full before:bg-tertiary before:absolute before:top-0 before:bottom-0 before:right-0 marker:before:h-full before:w-[3000px] before:rounded-xl",
  subtle:
    "bg-lightest-blue-500 ml-4 -mt-8 relative shadow-xl p-8 md:absolute md:right-8 md:-bottom-20 w-11/12 md:w-8/12 rounded-xl",
};

const id = "id_" + Math.random().toString(36).slice(2, 11);
---

<div class="relative isolate flex flex-col" }>
  <div
    class="ml-[-150%] flex max-h-[400px] w-[400%] items-center justify-center overflow-hidden rounded-xl lg:ml-[unset] lg:max-h-[unset] lg:w-full"
  >
    {
      highlight.image && (
        <SanityImg
          src={highlight.image}
          alt={highlight.image?.asset?.altTexts?.[locale] || ""}
          class="rounded-xl transition-transform duration-300 ease-in-out group-hover:scale-105 motion-reduce:group-hover:scale-100"
          loading="lazy"
          width="1200"
          height="800"
        />
      )
    }
  </div>
  <div
    class:list={[
      "z-20 flex flex-col items-start text-black animate-delay-100 animate-once animate-ease-out",
      styles[highlight.style!],
      id,
    ]}
  >
    <h2 class="text-balance font-serif text-lg font-medium sm:text-xl">
      {highlight.intro?.title}
    </h2>
    <div class="font-sm prose font-light">
      {
        highlight.intro?.intro && (
          <PortableText
            value={highlight.intro?.intro}
            components={defaultComponents}
          />
        )
      }
    </div>
    {
      highlight.ctaVisible && highlight.cta?.link && (
        <Button
          class="mt-6"
          color="light"
          target={highlight.cta?.link?.blank ? "_blank" : undefined}
          link={getHrefFromLinkObject(highlight.cta?.link, locale)}
        >
          {highlight.cta.text}
        </Button>
      )
    }
  </div>
</div>

<script is:inline define:vars={{ id }}>
  const textBlock = document.querySelector(`.${id}`);

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting && textBlock) {
        if (textBlock.classList.contains("yellow")) {
          textBlock.classList.add("motion-safe:animate-fade-right");
        } else {
          textBlock.classList.add("motion-safe:animate-fade-up");
        }

        observer.unobserve(textBlock);
      }
    });
  });

  textBlock && observer.observe(textBlock);
</script>
