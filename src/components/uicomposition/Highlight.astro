---
import type { ImageMetadata } from "astro";

import { Image } from "astro:assets";
import Button from "../uielements/Button.astro";

interface Props {
  title: string;
  text: string;
  buttonText?: string;
  buttonLink?: string;
  headlineTag?: "h2" | "h3" | "h4" | "h5" | "h6" | "span";
  style?: "yellow" | "lightblue";
  image: string;
  class?: string;
}
const {
  title,
  text,
  buttonText,
  image,
  buttonLink,
  headlineTag = "h4",
  style = "yellow",
  class: className,
} = Astro.props;

const styles = {
  yellow:
    "yellow py-6 pr-6 sm:pr-20 -mt-6 md:mr-8 relative md:absolute md:bottom-12 w-full md:w-5/12 before:shadow-xl md:h-fit before:-z-10 md:before:h-full before:bg-tertiary before:absolute before:top-0 before:bottom-0 before:right-0 marker:before:h-full before:w-[3000px] before:rounded-xl",
  lightblue:
    "bg-lightest-blue-500 ml-4 -mt-8 relative shadow-xl p-8 md:absolute md:right-8 md:-bottom-20 w-11/12 md:w-8/12 rounded-xl",
};

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/{,**/}*.{jpeg,jpg,png,gif}",
);
if (!images[image])
  throw new Error(
    `"${image}" does not exist in glob: "src/assets/images/{,**/}*.{jpeg,jpg,png,gif}"`,
  );
const id = "id_" + Math.random().toString(36).slice(2, 11);

const HeadlineTagName = headlineTag;
---

<div class:list={["relative isolate my-20 flex flex-col md:my-40", className]}>
  <div
    class="ml-[-150%] flex max-h-[400px] w-[400%] items-center justify-center overflow-hidden rounded-xl lg:ml-[unset] lg:max-h-[unset] lg:w-full"
  >
    <Image
      loading="lazy"
      class="transition-transform duration-300 ease-in-out group-hover:scale-105 motion-reduce:group-hover:scale-100"
      src={images[image]()}
      alt={title}
    />
  </div>
  <div
    class:list={[
      "z-20 flex flex-col items-start text-black animate-delay-500 animate-once animate-ease-out",
      styles[style],
      id,
    ]}
  >
    <HeadlineTagName class="font-serif text-xl" set:html={title} />
    <div class="font-sm prose font-light" set:html={text} />
    {
      buttonText && (
        <Button class="mt-6" color="light" href={buttonLink}>
          {buttonText}
        </Button>
      )
    }
  </div>
</div>

<script define:vars={{ id }}>
  const textBlock = document.querySelector(`.${id}`);

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting && textBlock) {
        if (textBlock.classList.contains("yellow")) {
          textBlock.classList.add("motion-safe:animate-fade-right");
        } else {
          textBlock.classList.add("motion-safe:animate-fade-up");
        }

        observer.unobserve(textBlock);
      }
    });
  });

  textBlock && observer.observe(textBlock);
</script>
