---
import type { ImageMetadata } from "astro";

import { Image } from "astro:assets";

interface Props {
  quote: string;
  name: string;
  jobtitle?: string;
  profileImage: string;
  variant?: "flat" | "glass" | "content-glass";
  class?: string;
}
const {
  quote,
  name,
  jobtitle,
  profileImage,
  variant = "glass",
  class: className,
} = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/people/{,**/}*.{jpeg,jpg,png,gif}",
);
if (!images[profileImage])
  throw new Error(
    `"${profileImage}" does not exist in glob: "src/assets/people/{,**/}*.{jpeg,jpg,png,gif}"`,
  );
const id = "id_" + Math.random().toString(36).slice(2, 11);
---

<blockquote
  class:list={[
    className,
    variant == "content-glass"
      ? "not-prose mt-28 first:mt-20 lg:mt-0"
      : "mb-40",
    "group/quote mt-20 flex flex-col justify-end gap-8 md:flex-row lg:mt-0 lg:first:mt-0",
  ]}
>
  {
    variant == "flat" && (
      <div class="flex flex-col items-center justify-center text-white md:w-4/12">
        <Image
          loading="lazy"
          class="mb-8 aspect-square h-52 w-52 rounded-full transition-transform duration-300 ease-in-out motion-safe:group-hover/quote:scale-110 sm:h-40 sm:w-40 lg:h-52 lg:w-52"
          src={images[profileImage]()}
          alt={name}
        />
        <footer>
          <cite class="flex flex-col items-center justify-center not-italic">
            <span class="text-xs" set:html={name} />
            <span class="text-xxs" set:html={jobtitle} />
          </cite>
        </footer>
      </div>
    )
  }
  <div
    class:list={[
      "flex w-full flex-col items-start gap-8 rounded-xl text-lg",
      variant == "flat" && "bg-lightest-blue-500 p-12 text-black lg:w-8/12",
      variant == "glass" &&
        "relative w-full rounded-2xl border border-blue bg-gradient-to-r from-blue-600/70 to-blue-800/70 p-4 py-8 pt-40 text-white shadow-sm shadow-blue-200 backdrop-blur-sm sm:p-12 sm:pt-40 lg:w-11/12 lg:pl-40 lg:pt-12",
      variant == "content-glass" &&
        "relative w-full rounded-2xl border border-blue bg-gradient-to-r from-blue-600 to-blue-800 p-4 py-8 pt-40 text-white shadow-sm shadow-blue-200 sm:p-12 sm:pt-40 lg:w-full lg:pl-40 lg:pt-12",
      ,
      id,
    ]}
  >
    {
      variant == "flat" ? (
        <>
          <div class="flex h-20 w-20 items-center justify-center rounded-full bg-white p-4 transition-transform delay-200 duration-300 ease-in-out motion-safe:group-hover/quote:scale-110">
            <svg width="40" height="30" aria-hidden="true" focusable="false">
              <use xlink:href="/icons/icon-sprite.svg#icon-quote" />
            </svg>
          </div>
          <span class="text-sm font-light" set:html={quote} />
        </>
      ) : (
        <>
          <Image
            loading="lazy"
            class="absolute -top-20 left-4 aspect-square h-52 w-52 rounded-full transition-transform duration-300 ease-in-out motion-safe:group-hover/quote:scale-105 lg:-left-20 lg:top-[unset]"
            src={images[profileImage]()}
            alt={name}
          />
          <div class="relative p-4">
            <svg
              class="absolute left-0 top-0 h-4 w-4"
              width="40"
              height="30"
              aria-hidden="true"
              focusable="false"
            >
              <use xlink:href="/icons/icon-sprite.svg#icon-quote" />
            </svg>
            <span class="text-sm font-light" set:html={quote} />
            <svg
              class="absolute -bottom-0 -right-0 h-4 w-4 rotate-180"
              width="40"
              height="30"
              aria-hidden="true"
              focusable="false"
            >
              <use xlink:href="/icons/icon-sprite.svg#icon-quote" />
            </svg>
          </div>
          <footer>
            <cite class="flex flex-col pl-4 not-italic text-white sm:pl-4">
              <span class="text-xs" set:html={name} />
              <span class="font-serif text-xxs" set:html={jobtitle} />
            </cite>
          </footer>
        </>
      )
    }
  </div>
</blockquote>

<script define:vars={{ id }}>
  const textBlock = document.querySelector(`.${id}`);

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting && textBlock) {
        textBlock.classList.add("motion-safe:animate-fade-up");
        observer.unobserve(textBlock);
      }
    });
  });

  textBlock && observer.observe(textBlock);
</script>
