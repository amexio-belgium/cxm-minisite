---
import type { ImageMetadata } from 'astro';

import { Image } from 'astro:assets';

interface Props {
    quote: string;
    name: string;
    jobtitle?: string;
    profileImage: string;
    variant?: 'flat' | 'glass' | 'content-glass' 
    class?: string;
}
const { 
    quote, 
    name, 
    jobtitle,
    profileImage, 
    variant = "glass",
    class: className,
} = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/people/{,**/}*.{jpeg,jpg,png,gif}');
if (!images[profileImage]) throw new Error(`"${profileImage}" does not exist in glob: "src/assets/people/{,**/}*.{jpeg,jpg,png,gif}"`);
const id = "id_" + Math.random().toString(36).slice(2, 11)

---
<blockquote class:list={[className,variant == "content-glass" ? "not-prose mt-28 first:mt-20 lg:mt-0" : "mb-40", "group/quote flex flex-col justify-end gap-8 mt-20 lg:mt-0 lg:first:mt-0 md:flex-row"]}>
    {
        variant == "flat" && 
        <div class="flex flex-col items-center justify-center text-white md:w-4/12 ">
        <Image loading="lazy" class="motion-safe:group-hover/quote:scale-110 transition-transform ease-in-out duration-300  mb-8 rounded-full aspect-square w-52 h-52 sm:w-40 sm:h-40 lg:w-52 lg:h-52" src={images[profileImage]()} alt={name} />
        <footer>
            <cite class="flex flex-col items-center justify-center not-italic">
                <span class="text-xs" set:html={name}></span>
                <span class="text-xxs" set:html={jobtitle}></span>
            </cite>
        </footer>
        </div>
    }
    <div class:list={["flex flex-col items-start w-full gap-8  text-lg rounded-xl ",
     variant == "flat" && "text-black bg-lightest-blue-500 lg:w-8/12 p-12",
     variant == "glass" && "py-8 p-4 pt-40 sm:p-12 sm:pt-40 lg:pt-12 w-full lg:w-11/12  relative text-white lg:pl-40 bg-gradient-to-r from-blue-600/70 to-blue-800/70 shadow-blue-200 rounded-2xl border border-blue shadow-sm backdrop-blur-sm ",
     variant == "content-glass" && "py-8 p-4 pt-40 sm:p-12 sm:pt-40 lg:pt-12 w-full lg:w-full relative text-white lg:pl-40 bg-gradient-to-r from-blue-600 to-blue-800 shadow-blue-200 rounded-2xl border border-blue shadow-sm ",
    , id]}> 
        {
            variant == "flat" ? 
            <div class="flex items-center justify-center w-20 h-20 p-4 bg-white rounded-full motion-safe:group-hover/quote:scale-110 transition-transform ease-in-out duration-300 delay-200">
                <svg width="40" height="30" aria-hidden="true" focusable="false">
                    <use xlink:href=`${import.meta.env.PUBLIC_ASTRO_BASE_PATH}/icons/icon-sprite.svg#icon-quote`></use>
                </svg>
            </div> 
            <span class="text-sm font-light" set:html={quote}></span>
            :
            <Image loading="lazy" class="motion-safe:group-hover/quote:scale-105 transition-transform ease-in-out duration-300 absolute rounded-full aspect-square -top-20 left-4 lg:top-[unset] lg:-left-20 w-52 h-52" src={images[profileImage]()} alt={name} />
            <div class="relative p-4">
                <svg class="absolute w-4 h-4 top-0 left-0"  width="40" height="30" aria-hidden="true" focusable="false">
                    <use xlink:href=`${import.meta.env.PUBLIC_ASTRO_BASE_PATH}/icons/icon-sprite.svg#icon-quote`></use>
                </svg>    
                <span class="text-sm font-light" set:html={quote}></span>
                <svg class="rotate-180 absolute w-4 h-4 -bottom-0 -right-0"  width="40" height="30" aria-hidden="true" focusable="false">
                    <use xlink:href=`${import.meta.env.PUBLIC_ASTRO_BASE_PATH}/icons/icon-sprite.svg#icon-quote`></use>
                </svg>    
            </div>
            <footer>
                <cite class="pl-4 sm:pl-4 flex flex-col text-white not-italic">
                    <span class="text-xs" set:html={name}></span>
                    <span class="text-xxs font-serif" set:html={jobtitle}></span>
                </cite>
            </footer>
        }

    </div>
</blockquote>

<script define:vars={{id}} >
    const textBlock = document.querySelector(`.${id}`);
  
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting && textBlock) {
          textBlock.classList.add('motion-safe:animate-fade-up');
          observer.unobserve(textBlock);
        }
      });
    });
  
    textBlock && observer.observe(textBlock);
</script>