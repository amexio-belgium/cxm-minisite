---
import { parseHref } from "@lib/helpers";
import { stegaClean } from "@sanity/client/stega";
import type {
  CollaborationModelReferenced,
  ServiceWithReferences,
  TechnologyReferenced,
} from "@sanity/custom.sanity.types";
import * as m from "@src/paraglide/messages";

interface Props {
  duration: string | undefined | null;
  collaboration: CollaborationModelReferenced | undefined | null;
  services: ServiceWithReferences[] | undefined | null;
  technologies: TechnologyReferenced[] | undefined | null;
  coreTechnology?: string;
}

const { duration, collaboration, services, coreTechnology } = Astro.props;

const locale = Astro.currentLocale!;
---

<div
  class="relative -mt-16 mb-20 inline-block h-fit w-full flex-col items-start justify-start rounded-2xl border border-blue bg-gradient-to-r from-blue-600/70 to-blue-800/70 p-4 text-white shadow-sm shadow-blue-200 animate-delay-100 animate-ease-out motion-safe:animate-fade-up md:-mt-6 md:p-8 lg:-mt-16"
>
  <h2 class="mb-6 font-serif text-lg">{m.metadataHeadline()}</h2>
  <dl
    class="project-metadata mb-8 flex flex-col gap-4 font-serif text-sm lg:flex-row lg:flex-wrap"
  >
    {
      duration && (
        <div class="flex after:text-secondary lg:after:ml-4">
          <dt class="inline lg:block">{m.metadataDuration() + ":"}</dt>
          <dd class="inline lg:block">{duration}</dd>
        </div>
      )
    }
    {
      collaboration?.collaborationTabs && (
        <div class="after:text-secondary lg:flex lg:after:ml-4">
          <dt class="inline lg:block">{m.metadataCollaboration() + ":"}</dt>
          <dd class="inline lg:block">
            {collaboration.collaborationTabs
              .map((tab) => tab?.concept?.prefLabel)
              .join(", ")}
          </dd>
        </div>
      )
    }
    {
      coreTechnology && coreTechnology.length > 0 && (
        <div class="after:text-secondary lg:flex lg:after:ml-4">
          <dt class="inline lg:block">{m.metadataTechnologies() + ":"}</dt>
          <dd class="inline lg:block">{coreTechnology}</dd>
        </div>
      )
    }
    {
      services && (
        <div class="lg:flex">
          <dt class="inline lg:block">{m.metadataServices() + ":"}</dt>
          <dd class="inline lg:block">
            {services.map((service, index) => (
              <a
                style={`transition-duration: ${stegaClean(service.metadata?.title || "").length * 20}ms`}
                class="mr-1 bg-gradient-to-r from-secondary from-0% via-secondary via-50% to-white to-50% bg-[length:200%_100%] bg-clip-text bg-[100%] text-transparent underline decoration-white decoration-1 underline-offset-2 transition-all hover:bg-[0%_100%] hover:decoration-secondary focus-visible:rounded focus-visible:px-2 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-secondary motion-reduce:transition-none"
                href={parseHref(
                  `/${locale}/services/${service.metadata?.slug?.current}/`,
                )}
              >
                {`${service.metadata?.title}${index + 1 !== services?.length ? ", " : ""}`}
              </a>
            ))}
          </dd>
        </div>
      )
    }
  </dl>
  <div
    class="grid items-center gap-x-2 gap-y-6 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5"
  >
    <slot />
  </div>
</div>
<style>
  @media (min-width: 1024px) {
    .project-metadata dt {
      padding-inline-end: 1ch;
    }
    @supports (content: "x" / "y") {
      .project-metadata > div:not(:last-child):after {
        content: "/" / "";
      }
    }
    @supports not (content: "x" / "y") {
      .project-metadata > div:not(:last-child):after {
        content: "/";
      }
    }
  }
</style>
