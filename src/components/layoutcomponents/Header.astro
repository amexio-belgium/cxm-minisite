---
import { getLangFromUrl, useTranslations } from '../../i18n/utils';
import HeaderLink from '../uielements/HeaderLink.astro';
import SkipLink from '../uielements/Skiplink.astro';
import AmexioFuse from '@components/graphicelements/AmexioFuse.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

---
<SkipLink href="#main-content">{t('main.skiplink')}</SkipLink>
<header>
	<nav class="flex items-center justify-center w-screen pr-2 md:pr-4 xl:pr-0 py-4 md:pt-6 lg:pt-8 ">
		<div class="px-6 sm:px-8 md:px-6 max-w-[1304px] w-screen h-full flex flex-wrap items-center justify-between ">
			<a href={`${import.meta.env.PUBLIC_ASTRO_BASE_PATH}/${lang}/`} class="flex justify-center text-xl focus-visible:outline focus-visible:outline-offset-4 focus-visible:outline-2 focus-visible:outline-yellow-500">
				<AmexioFuse class="w-auto h-[36px] md:h-[50px]" />
			</a>
			<button id="main-menu-trigger"
				type="button" 
				class="inline-flex items-center justify-center w-12 h-12 p-2 -mr-2 text-white md:hidden hover:text-yellow-500 focus:outline-none focus-visible:outline focus-visible:outline-offset-4 focus-visible:outline-2 focus-visible:outline-yellow-500 transition-transform ease-in-out"
				aria-controls="main-menu" 
				aria-expanded="false">
				<span class="sr-only">{t('mainmenu.open')}</span>
				<svg class="w-14 h-14 fill-white"  aria-hidden="true" focusable="false"><use xlink:href=`${import.meta.env.PUBLIC_ASTRO_BASE_PATH}/icons/icon-sprite.svg#icon-menu`></use></svg>
			</button>
			<dialog class="main-navigation-dialog open:bg-blue-800 motion-safe:open:animate-fade motion-safe:open:animate-once motion-safe:open:animate-duration-500 open:animate-ease-out" class="m-0" id="main-menu">
				<div class="flex items-center justify-center w-screen border-b border-transparent py-4 md:hidden">
					<div class="w-screen px-6 sm:px-8 h-full flex flex-wrap items-center justify-between ">
						<a href={`${import.meta.env.PUBLIC_ASTRO_BASE_PATH}/${lang}/`} class="flex justify-center text-xl focus:outline-none focus-visible:outline focus-visible:outline-offset-4 focus-visible:outline-2 focus-visible:outline-yellow-500">
							<AmexioFuse class="w-auto h-[36px] md:h-[50px]" />
						</a>
						<button id="close-main-menu"
							type="button" 
							class="inline-flex items-center justify-center w-12 h-12 p-2 -mr-2 text-white hover:text-yellow-500 md:hidden focus:outline-none focus-visible:outline focus-visible:outline-offset-4 focus-visible:outline-2 focus-visible:outline-yellow-500"
							aria-controls="main-menu">
							<span class="sr-only">{t('mainmenu.close')}</span>
							<svg class="w-14 h-14 fill-white"  aria-hidden="true" focusable="false"><use xlink:href=`${import.meta.env.PUBLIC_ASTRO_BASE_PATH}/icons/icon-sprite.svg#icon-close`></use></svg>
						</button>
					</div>
				</div>
				<div class="relative pr-8 ml-auto w-fit md:pr-0" style="--n-of-headerlinks:5">
					<ul class="main-navigation scroll-mt-20 flex flex-col text-right items-start gap-0 md:text-left md:gap-6 md:flex-row rtl:space-x-reverse md:mt-0 md:px-0 lg:justify-end lg:gap-8">
						<HeaderLink href={`/${lang}/services/`}>{t('nav.services')}</HeaderLink>
						<HeaderLink href={`/${lang}/insights/`}>{t('nav.blog')}</HeaderLink>
						<HeaderLink href={`/${lang}/work/`}>{t('nav.cases')}</HeaderLink>
						<HeaderLink href={`/${lang}/about/`}>{t('nav.about')}</HeaderLink>
						<HeaderLink href={`/${lang}/contact/`}>{t('nav.contact')}</HeaderLink>
					</ul>
					<span class="js-active-page-idicator hidden top-0 right-4 absolute bg-orange-500 md:top-auto md:left-0 md:right:auto md:-bottom-3 w-[6px] h-[6px] rounded-full transition-transform ease-in-out duration-500"></span>
				</div>
			</dialog>
			</div>
		</div>
	</nav>
</header>
<script>
	import setFocus from "@lib/setFocus.js";
	const mainMenu = document.getElementById('main-menu') as HTMLDialogElement;;
	const mainMenuTrigger = document.getElementById('main-menu-trigger') as HTMLButtonElement;

	if(mainMenu && mainMenuTrigger) {
		const isSmallScreen = window.matchMedia("(max-width: 767px)");
		const mainNav = mainMenu.querySelector('.main-navigation'); 
		const mainNavLinks = mainNav!.querySelectorAll('a');
		const activeMainNavLink = mainNav!.querySelector('a[aria-current="page"');
		const dotIndicator = mainMenu.querySelector('.js-active-page-idicator') as HTMLSpanElement;
		const closeMainMenuTrigger = document.getElementById('close-main-menu');

		const getCenterX = (el) => {
            return el.getBoundingClientRect().width / 2
        }
		const getCenterY = (el) => {
            return el.getBoundingClientRect().height / 2
        }

		const getLeft = (el) => {
            return el.getBoundingClientRect().left
        }

		const getTop = (el) => {
            return el.getBoundingClientRect().top
        }

		const showDotIndicator = () => {
			dotIndicator!.classList.remove('hidden');
		}
		const hideDotIndicator = () => {
			dotIndicator!.classList.add('hidden');
		}

		const setInitialDotState = () => {
			if(activeMainNavLink) {
				handleDotPosition(activeMainNavLink,mainNav);
				showDotIndicator();
			}
			else {
				hideDotIndicator();
			}
		}

		const mainNavigationResizeObserver = new ResizeObserver(entries => {
			for (let entry of entries) {
				setInitialDotState();
			}
		});
	
		const handleDotPosition = (element,wrapper) => {
			if (isSmallScreen.matches) {
				dotIndicator!.style.transform = `translateY(${getTop(element) + getCenterY(element) - getTop(wrapper) - getCenterY(dotIndicator)}px)`;
			} else {
				dotIndicator!.style.transform = `translateX(${getLeft(element) + getCenterX(element) - getLeft(wrapper)}px)`;
			}

			if(!activeMainNavLink) {
				showDotIndicator();
			}
		}

		const openMobileMenu = () => {
			hideDotIndicator();
			mainMenuTrigger.setAttribute('aria-expanded','true');
			mainMenu.showModal();
			setFocus(mainNav, {
                onBeforeFocus() {
                    mainNav!.classList.add("outline-none");
                },
                onBlur() {
                    mainNav!.classList.remove("outline-none");
                },
            });
			document.documentElement.style.overflowY = 'clip';
        	document.documentElement.style.position = 'fixed';
			document.documentElement.style.width = '100%';
			setTimeout(() => {
                setInitialDotState();
            }, 500);
			
		}

		const handleOrientationChange = (mql) => {
			hideDotIndicator();
  			if(isSmallScreen.matches) {
				mainMenu.removeAttribute("role");
				mainMenu.close();
			} else {
				mainMenu.setAttribute("role","none");
				mainMenu.close();
			}
			setInitialDotState();
		}

		isSmallScreen.addEventListener("change", handleOrientationChange);

		closeMainMenuTrigger!.addEventListener('click',function(){
			mainMenu.close();
		},false);

		mainMenu.addEventListener('close',function() {
			document.documentElement.style.overflowY = '';
        	document.documentElement.style.position = '';
			document.documentElement.style.width = '';
			mainMenuTrigger.setAttribute('aria-expanded','false');
		},false);

		mainMenuTrigger.addEventListener('click', function(event) {
			openMobileMenu();
		});

		[...mainNavLinks].forEach(mainNavLink => {
            mainNavLink.addEventListener('mouseenter',function (e){
				handleDotPosition(e.target,mainNav);
			},false);
        });

		mainNav!.addEventListener("mouseleave",setInitialDotState,false);
		setInitialDotState();
		
		if(mainNav){
			mainNavigationResizeObserver.observe(mainNav);
		}
	}
</script>